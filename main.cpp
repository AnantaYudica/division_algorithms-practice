
#include <cstdio>
#include <cstdint>
#include <chrono>
#include <iostream>

#include "algorithm/RepeatedSubtraction.h"
#include "algorithm/NewtonRaphson.h"
#include "helper/Print.h"
#include "helper/Comparison.h"

template<std::size_t NRS, std::size_t DS, std::size_t QS>
void Test(
    const char * name_fun,
    std::uint8_t (&n_r)[NRS], 
    std::uint8_t (&d)[DS],
    std::uint8_t (&q)[QS], 
    void (&fun)(std::uint8_t (&)[NRS], std::uint8_t (&)[DS], std::uint8_t (&)[QS]),
    std::uint8_t (&t_q)[QS],
    std::uint8_t (&t_r)[NRS])
{
    std::cout << "-----------BEGIN_TEST-----------------" << std::endl;
    std::cout << "Algorithm : " << name_fun << std::endl;
    std::cout << "Input:" << std::endl;
    std::cout << " N : "; helper::Print(n_r); std::cout << std::endl;
    std::cout << " D : "; helper::Print(d); std::cout << std::endl;
    auto start = std::chrono::steady_clock::now();
    fun(n_r, d, q);
	auto end = std::chrono::steady_clock::now();
    std::cout << "Result:" << std::endl;
    std::cout << " Q : "; helper::Print(q); std::cout << std::endl;
    std::cout << " R : "; helper::Print(n_r); std::cout << std::endl;
	std::cout << "Elapsed time : " 
		<< std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()
		<< " ms" << std::endl;
    
    std::cout << "Test : ";
    if (helper::Comparison(n_r, t_r) == 0 && 
        helper::Comparison(t_q, q) == 0 ) std::cout << "Pass";
    else std::cout << "Failed";
    std::cout << std::endl;
    std::cout << "-------------END_TEST-----------------" << std::endl << std::endl;
}

int main()
{
    std::uint8_t n0[2]{0x00, 0x01}; // 256
    std::uint8_t d0[2]{0x08, 0x00}; //8
    std::uint8_t q0[2]{0x00, 0x00}; //0
    std::uint8_t res_q0[2]{0x20, 0x00}; //32
    std::uint8_t res_r0[2]{0x00, 0x00}; //0
    Test("repeated_subtraction", n0, d0, q0, 
        algorithm::repeated_subtraction::Divide,
        res_q0, res_r0);
    
    std::uint8_t n1[4]{0x01, 0x00, 0x00, 0x80}; // 2147483649
    std::uint8_t d1[4]{0x08, 0x00, 0x00, 0x00}; //8
    std::uint8_t q1[4]{0x00, 0x00, 0x00, 0x00}; //0
    std::uint8_t res_q1[4]{0x00, 0x00, 0x00, 0x10}; //268435456
    std::uint8_t res_r1[4]{0x01, 0x00, 0x00, 0x00}; //1
    Test("repeated_subtraction", n1, d1, q1, 
        algorithm::repeated_subtraction::Divide,
        res_q1, res_r1);
    
    std::uint8_t n0_1[2]{0x00, 0x01}; // 256
    std::uint8_t d0_1[2]{0x08, 0x00}; //8
    std::uint8_t q0_1[2]{0x00, 0x00}; //0
    std::uint8_t res_q0_1[2]{0x20, 0x00}; //32
    std::uint8_t res_r0_1[2]{0x00, 0x00}; //0
    Test("newton_raphson", n0_1, d0_1, q0_1, 
        algorithm::newton_raphson::Divide,
        res_q0_1, res_r0_1);

    std::uint8_t n1_1[4]{0x01, 0x00, 0x00, 0x80}; // 2147483649
    std::uint8_t d1_1[4]{0x08, 0x00, 0x00, 0x00}; //8
    std::uint8_t q1_1[4]{0x00, 0x00, 0x00, 0x00}; //0
    std::uint8_t res_q1_1[4]{0x00, 0x00, 0x00, 0x10}; //268435456
    std::uint8_t res_r1_1[4]{0x01, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n1_1, d1_1, q1_1, 
        algorithm::newton_raphson::Divide,
        res_q1_1, res_r1_1);

    std::uint8_t n2_1[2]{0xFF, 0xFF}; // 65535
    std::uint8_t d2_1[2]{0xFF, 0xFF}; // 65535
    std::uint8_t q2_1[2]{0x00, 0x00}; // 0
    std::uint8_t res_q2_1[2]{0x01, 0x00}; //1
    std::uint8_t res_r2_1[2]{0x00, 0x00}; //0
    Test("newton_raphson", n2_1, d2_1, q2_1, 
        algorithm::newton_raphson::Divide,
        res_q2_1, res_r2_1);

    std::uint8_t n3_1[1]{0xFF}; // 255
    std::uint8_t d3_1[1]{0xFF}; // 255
    std::uint8_t q3_1[1]{0x00}; // 0
    std::uint8_t res_q3_1[1]{0x01}; //1
    std::uint8_t res_r3_1[1]{0x00}; //0
    Test("newton_raphson", n3_1, d3_1, q3_1, 
        algorithm::newton_raphson::Divide,
        res_q3_1, res_r3_1);

    std::uint8_t n4_1[2]{0xFF, 0xFF}; // 65535
    std::uint8_t d4_1[2]{0xFE, 0xFF}; // 65534
    std::uint8_t q4_1[2]{0x00, 0x00}; // 0
    std::uint8_t res_q4_1[2]{0x01, 0x00}; //1
    std::uint8_t res_r4_1[2]{0x01, 0x00}; //1
    Test("newton_raphson", n4_1, d4_1, q4_1, 
        algorithm::newton_raphson::Divide,
        res_q4_1, res_r4_1);
    
    std::uint8_t n5_1[8]{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t d5_1[8]{0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t q5_1[8]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0
    std::uint8_t res_q5_1[8]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    std::uint8_t res_r5_1[8]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n5_1, d5_1, q5_1, 
        algorithm::newton_raphson::Divide,
        res_q5_1, res_r5_1);
    
    std::uint8_t n6_1[16]{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t d6_1[16]{0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t q6_1[16]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0
    std::uint8_t res_q6_1[16]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    std::uint8_t res_r6_1[16]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n6_1, d6_1, q6_1, 
        algorithm::newton_raphson::Divide,
        res_q6_1, res_r6_1);

    std::uint8_t n7_1[32]{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t d7_1[32]{0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t q7_1[32]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0
    std::uint8_t res_q7_1[32]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    std::uint8_t res_r7_1[32]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n7_1, d7_1, q7_1, 
        algorithm::newton_raphson::Divide,
        res_q7_1, res_r7_1);
        
    std::uint8_t n8_1[64]{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t d8_1[64]{0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t q8_1[64]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0
    std::uint8_t res_q8_1[64]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    std::uint8_t res_r8_1[64]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n8_1, d8_1, q8_1, 
        algorithm::newton_raphson::Divide,
        res_q8_1, res_r8_1);

    std::uint8_t n9_1[128]{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t d9_1[128]{0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    std::uint8_t q9_1[128]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; // 0
    std::uint8_t res_q9_1[128]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    std::uint8_t res_r9_1[128]{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}; //1
    Test("newton_raphson", n9_1, d9_1, q9_1, 
        algorithm::newton_raphson::Divide,
        res_q9_1, res_r9_1);
    return 0;
}
